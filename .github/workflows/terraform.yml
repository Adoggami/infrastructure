name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
    # Rimuoviamo i percorsi per farlo attivare con qualsiasi push
  pull_request:
    branches: [ main ]
    # Rimuoviamo i percorsi anche qui

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_pg_admin: ${{ secrets.PG_ADMIN }}
  TF_VAR_pg_pass: ${{ secrets.PG_PASS }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    # Rimuoviamo il defaults working-directory globale che sta causando problemi
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.7.0

    # Verifichiamo la struttura delle directory
    - name: List Directory Structure
      run: |
        pwd
        ls -la
        echo "---"
        ls -la ./infra || echo "No infra directory"
        echo "---"
        find . -type d | sort

    # Prima verifichiamo che il backend sia giÃ  configurato
    - name: Check if Backend Exists
      id: backend-check
      run: |
        az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p ${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}
        az account set --subscription ${{ env.ARM_SUBSCRIPTION_ID }}
        EXISTS=$(az group exists -n rg-adoggami-tfstate)
        echo "backend_exists=$EXISTS" >> $GITHUB_OUTPUT

    # Configurazione del backend se necessario
    - name: Setup Backend
      if: steps.backend-check.outputs.backend_exists == 'false'
      run: |
        # Trova la directory bootstrap
        BOOTSTRAP_DIR=$(find . -type d -name "bootstrap" | head -n 1)
        
        if [ -z "$BOOTSTRAP_DIR" ]; then
          echo "Bootstrap directory not found"
          exit 1
        fi
        
        echo "Using bootstrap directory: $BOOTSTRAP_DIR"
        cd "$BOOTSTRAP_DIR"
        
        terraform init
        terraform apply -auto-approve

    # Deploy principale
    - name: Find Terraform Root
      id: find-terraform
      run: |
        # Trova la directory contenente main.tf, variables.tf e backend.tf
        TF_ROOT=$(find . -type f -name "backend.tf" | xargs dirname | head -n 1)
        
        if [ -z "$TF_ROOT" ]; then
          echo "Terraform root directory not found"
          exit 1
        fi
        
        echo "Using Terraform root directory: $TF_ROOT"
        echo "tf_root=$TF_ROOT" >> $GITHUB_OUTPUT

    # Deploy principale
    - name: Terraform Init
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: terraform init

    - name: Terraform Format
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: terraform fmt -check || true

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: terraform apply -auto-approve
