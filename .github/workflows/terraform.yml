name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Per trigger manuale
    inputs:
      refresh_state:
        description: 'Refresh Terraform state before planning'
        required: false
        default: 'false'
        type: boolean

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_pg_admin: ${{ secrets.PG_ADMIN }}
  TF_VAR_pg_pass: ${{ secrets.PG_PASS }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Per commentare le PR
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4  # Versione più recente

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3  # Versione più recente
      with:
        terraform_version: 1.7.0
        terraform_wrapper: false  # Per output più puliti

    # Azure CLI login
    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ env.ARM_CLIENT_ID }}",
            "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ env.ARM_TENANT_ID }}"
          }

    # Verifichiamo la struttura delle directory
    - name: List Directory Structure
      run: |
        echo "🔍 Analyzing repository structure..."
        pwd
        ls -la
        echo "---"
        find . -name "*.tf" -type f | head -10
        echo "---"
        find . -type d -name "*terraform*" -o -name "*infra*" -o -name "*bootstrap*" | sort

    # Prima verifichiamo che il backend sia già configurato
    - name: Check if Backend Exists
      id: backend-check
      run: |
        echo "🔍 Checking if Terraform backend exists..."
        EXISTS=$(az group exists -n rg-adoggami-tfstate)
        echo "Backend resource group exists: $EXISTS"
        echo "backend_exists=$EXISTS" >> $GITHUB_OUTPUT

    # Configurazione del backend se necessario
    - name: Setup Backend
      if: steps.backend-check.outputs.backend_exists == 'false'
      run: |
        echo "🚀 Setting up Terraform backend..."
        BOOTSTRAP_DIR=$(find . -type d -name "bootstrap" | head -n 1)
        
        if [ -z "$BOOTSTRAP_DIR" ]; then
          echo "❌ Bootstrap directory not found"
          exit 1
        fi
        
        echo "📁 Using bootstrap directory: $BOOTSTRAP_DIR"
        cd "$BOOTSTRAP_DIR"
        
        terraform init
        terraform validate
        terraform plan
        terraform apply -auto-approve
        echo "✅ Backend setup completed"

    # Deploy principale
    - name: Find Terraform Root
      id: find-terraform
      run: |
        echo "🔍 Finding Terraform root directory..."
        # Cerca backend.tf prima, poi main.tf come fallback
        TF_ROOT=$(find . -type f -name "backend.tf" | xargs dirname | head -n 1)
        
        if [ -z "$TF_ROOT" ]; then
          echo "⚠️ backend.tf not found, looking for main.tf..."
          TF_ROOT=$(find . -type f -name "main.tf" | xargs dirname | head -n 1)
        fi
        
        if [ -z "$TF_ROOT" ]; then
          echo "❌ Terraform root directory not found"
          exit 1
        fi
        
        # Rimuovi ./ se presente
        TF_ROOT=$(echo "$TF_ROOT" | sed 's|^\./||')
        
        echo "📁 Using Terraform root directory: $TF_ROOT"
        echo "tf_root=$TF_ROOT" >> $GITHUB_OUTPUT
        
        # Verifica file essenziali
        echo "📋 Files in Terraform root:"
        ls -la "$TF_ROOT"

    # Terraform Init
    - name: Terraform Init
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: |
        echo "🔧 Initializing Terraform..."
        terraform init -input=false
        echo "✅ Terraform initialized"

    # State cleanup per problemi noti (come PostgreSQL phantom)
    - name: Clean State Issues
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: |
        echo "🧹 Checking for state issues..."
        
        # Lista tutti gli elementi nello state
        echo "Current state resources:"
        terraform state list || echo "No state file found"
        
        # Refresh dello state per sincronizzare con Azure
        echo "🔄 Refreshing state to sync with Azure..."
        terraform refresh -input=false || true
        
        echo "✅ State cleanup completed"

    # Terraform Validate
    - name: Terraform Validate
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: |
        echo "✅ Validating Terraform configuration..."
        terraform validate

    # Terraform Format Check e Auto-fix
    - name: Terraform Format
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: |
        echo "📝 Checking Terraform formatting..."
        
        # Controlla se i file sono formattati
        if ! terraform fmt -check -recursive; then
          echo "⚠️ Files need formatting, applying automatic formatting..."
          
          # Applica il formatting automaticamente
          terraform fmt -recursive
          
          # Verifica se ci sono modifiche da committare
          if git diff --exit-code; then
            echo "✅ All files are now formatted correctly"
          else
            echo "📝 Files have been auto-formatted"
            
            # Configura git per il commit
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Committa le modifiche di formatting
            git add .
            git commit -m "style: auto-format Terraform files [skip ci]" || true
            
            # Push solo se non siamo in una PR
            if [ "${{ github.event_name }}" != "pull_request" ]; then
              git push || true
            else
              echo "💡 In PR mode - formatting changes will need manual commit"
            fi
          fi
        else
          echo "✅ All files are correctly formatted"
        fi

    # Terraform Plan (solo per PR)
    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      id: plan
      run: |
        echo "📋 Creating Terraform plan..."
        
        # Se il plan fallisce per conflitti, prova a pulire lo state
        if ! terraform plan -detailed-exitcode -no-color -out=tfplan; then
          echo "⚠️ Plan failed, checking for state conflicts..."
          
          # Cerca risorse PostgreSQL nello state che potrebbero non esistere
          POSTGRES_RESOURCES=$(terraform state list | grep postgres || true)
          
          if [ ! -z "$POSTGRES_RESOURCES" ]; then
            echo "🗑️ Found PostgreSQL resources in state, checking if they exist in Azure..."
            
            # Per ogni risorsa PostgreSQL, controlla se esiste realmente
            echo "$POSTGRES_RESOURCES" | while read resource; do
              echo "Checking: $resource"
              # Se necessario, rimuovi risorse fantasma
              # terraform state rm "$resource" 2>/dev/null || true
            done
            
            echo "🔄 Retrying plan after state cleanup..."
            terraform plan -detailed-exitcode -no-color -out=tfplan
          else
            echo "❌ Plan failed for other reasons"
            exit 1
          fi
        fi
        
        # Salva il plan output per il commento
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true

    # Commenta la PR con il piano
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const planOutput = fs.readFileSync(
            path.join('${{ steps.find-terraform.outputs.tf_root }}', 'plan_output.txt'), 
            'utf8'
          );
          
          const comment = `## 📋 Terraform Plan
          
          <details>
          <summary>Show Plan</summary>
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          </details>
          
          Plan result: ${{ steps.plan.outcome }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    # Terraform Apply (solo per main branch)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: |
        echo "🚀 Applying Terraform changes..."
        terraform apply -auto-approve -input=false
        echo "✅ Terraform apply completed"

    # Output dei risultati importanti
    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ${{ steps.find-terraform.outputs.tf_root }}
      run: |
        echo "📊 Terraform outputs:"
        terraform output || echo "No outputs defined"

    # Cleanup in caso di errore
    - name: Cleanup on Failure
      if: failure()
      run: |
        echo "🧹 Cleaning up after failure..."
        # Aggiungi qui eventuali cleanup necessari